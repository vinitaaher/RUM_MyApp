import { Instrumentation } from '@opentelemetry/instrumentation';
import { DocumentLoadInstrumentation } from '@opentelemetry/instrumentation-document-load';
import { FetchInstrumentation } from '@opentelemetry/instrumentation-fetch';
import { UserInteractionInstrumentation } from '@opentelemetry/instrumentation-user-interaction';
import { XMLHttpRequestInstrumentation } from '@opentelemetry/instrumentation-xml-http-request';
declare const InstrumentationMap: {
    '@opentelemetry/instrumentation-document-load': typeof DocumentLoadInstrumentation;
    '@opentelemetry/instrumentation-fetch': typeof FetchInstrumentation;
    '@opentelemetry/instrumentation-user-interaction': typeof UserInteractionInstrumentation;
    '@opentelemetry/instrumentation-xml-http-request': typeof XMLHttpRequestInstrumentation;
};
declare type ConfigArg<T> = T extends new (...args: infer U) => unknown ? U[0] : never;
export declare type InstrumentationConfigMap = {
    [Name in keyof typeof InstrumentationMap]?: ConfigArg<(typeof InstrumentationMap)[Name]>;
};
export declare function getWebAutoInstrumentations(inputConfigs?: InstrumentationConfigMap): Instrumentation[];
export {};
//# sourceMappingURL=utils.d.ts.map