{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,4CAA0C;AAK1C,gGAA2F;AAC3F,gFAA4E;AAC5E,sGAAiG;AACjG,sGAAgG;AAEhG,MAAM,kBAAkB,GAAG;IACzB,8CAA8C,EAAE,2DAA2B;IAC3E,sCAAsC,EAAE,4CAAoB;IAC5D,iDAAiD,EAC/C,iEAA8B;IAChC,iDAAiD,EAC/C,gEAA6B;CAChC,CAAC;AAUF,SAAgB,0BAA0B,CACxC,eAAyC,EAAE;;IAE3C,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;QAC5C,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,EAAE;YACnE,UAAI,CAAC,KAAK,CAAC,kCAAkC,IAAI,aAAa,CAAC,CAAC;YAChE,SAAS;SACV;KACF;IAED,MAAM,gBAAgB,GAAsB,EAAE,CAAC;IAE/C,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAEhD,EAAE;QACD,MAAM,QAAQ,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAC1C,qDAAqD;QACrD,MAAM,UAAU,GAA0B,MAAA,YAAY,CAAC,IAAI,CAAC,mCAAI,EAAE,CAAC;QAEnE,IAAI,UAAU,CAAC,OAAO,KAAK,KAAK,EAAE;YAChC,UAAI,CAAC,KAAK,CAAC,iCAAiC,IAAI,EAAE,CAAC,CAAC;YACpD,SAAS;SACV;QAED,IAAI;YACF,UAAI,CAAC,KAAK,CAAC,+BAA+B,IAAI,EAAE,CAAC,CAAC;YAClD,gBAAgB,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;SACjD;QAAC,OAAO,CAAM,EAAE;YACf,UAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SACf;KACF;IAED,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAjCD,gEAiCC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  Instrumentation,\n  InstrumentationConfig,\n} from '@opentelemetry/instrumentation';\nimport { DocumentLoadInstrumentation } from '@opentelemetry/instrumentation-document-load';\nimport { FetchInstrumentation } from '@opentelemetry/instrumentation-fetch';\nimport { UserInteractionInstrumentation } from '@opentelemetry/instrumentation-user-interaction';\nimport { XMLHttpRequestInstrumentation } from '@opentelemetry/instrumentation-xml-http-request';\n\nconst InstrumentationMap = {\n  '@opentelemetry/instrumentation-document-load': DocumentLoadInstrumentation,\n  '@opentelemetry/instrumentation-fetch': FetchInstrumentation,\n  '@opentelemetry/instrumentation-user-interaction':\n    UserInteractionInstrumentation,\n  '@opentelemetry/instrumentation-xml-http-request':\n    XMLHttpRequestInstrumentation,\n};\n\n// Config types inferred automatically from the first argument of the constructor\ntype ConfigArg<T> = T extends new (...args: infer U) => unknown ? U[0] : never;\nexport type InstrumentationConfigMap = {\n  [Name in keyof typeof InstrumentationMap]?: ConfigArg<\n    (typeof InstrumentationMap)[Name]\n  >;\n};\n\nexport function getWebAutoInstrumentations(\n  inputConfigs: InstrumentationConfigMap = {}\n): Instrumentation[] {\n  for (const name of Object.keys(inputConfigs)) {\n    if (!Object.prototype.hasOwnProperty.call(InstrumentationMap, name)) {\n      diag.error(`Provided instrumentation name \"${name}\" not found`);\n      continue;\n    }\n  }\n\n  const instrumentations: Instrumentation[] = [];\n\n  for (const name of Object.keys(InstrumentationMap) as Array<\n    keyof typeof InstrumentationMap\n  >) {\n    const Instance = InstrumentationMap[name];\n    // Defaults are defined by the instrumentation itself\n    const userConfig: InstrumentationConfig = inputConfigs[name] ?? {};\n\n    if (userConfig.enabled === false) {\n      diag.debug(`Disabling instrumentation for ${name}`);\n      continue;\n    }\n\n    try {\n      diag.debug(`Loading instrumentation for ${name}`);\n      instrumentations.push(new Instance(userConfig));\n    } catch (e: any) {\n      diag.error(e);\n    }\n  }\n\n  return instrumentations;\n}\n"]}