"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeStorageListeners = exports.buildStorageKey = exports.storeContextManager = void 0;
var addEventListener_1 = require("../../browser/addEventListener");
var mergeInto_1 = require("../../tools/mergeInto");
var CONTEXT_STORE_KEY_PREFIX = '_dd_c';
var storageListeners = [];
function storeContextManager(configuration, contextManager, productKey, customerDataType) {
    var storageKey = buildStorageKey(productKey, customerDataType);
    storageListeners.push((0, addEventListener_1.addEventListener)(configuration, window, addEventListener_1.DOM_EVENT.STORAGE, function (_a) {
        var key = _a.key;
        if (storageKey === key) {
            synchronizeWithStorage();
        }
    }));
    contextManager.changeObservable.subscribe(dumpToStorage);
    contextManager.setContext((0, mergeInto_1.combine)(getFromStorage(), contextManager.getContext()));
    function synchronizeWithStorage() {
        contextManager.setContext(getFromStorage());
    }
    function dumpToStorage() {
        localStorage.setItem(storageKey, JSON.stringify(contextManager.getContext()));
    }
    function getFromStorage() {
        var rawContext = localStorage.getItem(storageKey);
        return rawContext !== null ? JSON.parse(rawContext) : {};
    }
}
exports.storeContextManager = storeContextManager;
function buildStorageKey(productKey, customerDataType) {
    return "".concat(CONTEXT_STORE_KEY_PREFIX, "_").concat(productKey, "_").concat(customerDataType);
}
exports.buildStorageKey = buildStorageKey;
function removeStorageListeners() {
    storageListeners.map(function (listener) { return listener.stop(); });
}
exports.removeStorageListeners = removeStorageListeners;
//# sourceMappingURL=storeContextManager.js.map