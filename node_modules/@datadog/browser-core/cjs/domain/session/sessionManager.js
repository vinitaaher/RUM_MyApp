"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stopSessionManager = exports.startSessionManager = exports.VISIBILITY_CHECK_DELAY = void 0;
var observable_1 = require("../../tools/observable");
var valueHistory_1 = require("../../tools/valueHistory");
var timeUtils_1 = require("../../tools/utils/timeUtils");
var addEventListener_1 = require("../../browser/addEventListener");
var timer_1 = require("../../tools/timer");
var sessionConstants_1 = require("./sessionConstants");
var sessionStore_1 = require("./sessionStore");
exports.VISIBILITY_CHECK_DELAY = timeUtils_1.ONE_MINUTE;
var SESSION_CONTEXT_TIMEOUT_DELAY = sessionConstants_1.SESSION_TIME_OUT_DELAY;
var stopCallbacks = [];
function startSessionManager(configuration, productKey, computeSessionState, trackingConsentState) {
    var renewObservable = new observable_1.Observable();
    var expireObservable = new observable_1.Observable();
    // TODO - Improve configuration type and remove assertion
    var sessionStore = (0, sessionStore_1.startSessionStore)(configuration.sessionStoreStrategyType, productKey, computeSessionState);
    stopCallbacks.push(function () { return sessionStore.stop(); });
    var sessionContextHistory = new valueHistory_1.ValueHistory(SESSION_CONTEXT_TIMEOUT_DELAY);
    stopCallbacks.push(function () { return sessionContextHistory.stop(); });
    sessionStore.renewObservable.subscribe(function () {
        sessionContextHistory.add(buildSessionContext(), (0, timeUtils_1.relativeNow)());
        renewObservable.notify();
    });
    sessionStore.expireObservable.subscribe(function () {
        expireObservable.notify();
        sessionContextHistory.closeActive((0, timeUtils_1.relativeNow)());
    });
    // We expand/renew session unconditionally as tracking consent is always granted when the session
    // manager is started.
    sessionStore.expandOrRenewSession();
    sessionContextHistory.add(buildSessionContext(), (0, timeUtils_1.clocksOrigin)().relative);
    trackingConsentState.observable.subscribe(function () {
        if (trackingConsentState.isGranted()) {
            sessionStore.expandOrRenewSession();
        }
        else {
            sessionStore.expire();
        }
    });
    trackActivity(configuration, function () {
        if (trackingConsentState.isGranted()) {
            sessionStore.expandOrRenewSession();
        }
    });
    trackVisibility(configuration, function () { return sessionStore.expandSession(); });
    function buildSessionContext() {
        return {
            id: sessionStore.getSession().id,
            trackingType: sessionStore.getSession()[productKey],
        };
    }
    return {
        findActiveSession: function (startTime) { return sessionContextHistory.find(startTime); },
        renewObservable: renewObservable,
        expireObservable: expireObservable,
        expire: sessionStore.expire,
    };
}
exports.startSessionManager = startSessionManager;
function stopSessionManager() {
    stopCallbacks.forEach(function (e) { return e(); });
    stopCallbacks = [];
}
exports.stopSessionManager = stopSessionManager;
function trackActivity(configuration, expandOrRenewSession) {
    var stop = (0, addEventListener_1.addEventListeners)(configuration, window, [addEventListener_1.DOM_EVENT.CLICK, addEventListener_1.DOM_EVENT.TOUCH_START, addEventListener_1.DOM_EVENT.KEY_DOWN, addEventListener_1.DOM_EVENT.SCROLL], expandOrRenewSession, { capture: true, passive: true }).stop;
    stopCallbacks.push(stop);
}
function trackVisibility(configuration, expandSession) {
    var expandSessionWhenVisible = function () {
        if (document.visibilityState === 'visible') {
            expandSession();
        }
    };
    var stop = (0, addEventListener_1.addEventListener)(configuration, document, addEventListener_1.DOM_EVENT.VISIBILITY_CHANGE, expandSessionWhenVisible).stop;
    stopCallbacks.push(stop);
    var visibilityCheckInterval = (0, timer_1.setInterval)(expandSessionWhenVisible, exports.VISIBILITY_CHECK_DELAY);
    stopCallbacks.push(function () {
        (0, timer_1.clearInterval)(visibilityCheckInterval);
    });
}
//# sourceMappingURL=sessionManager.js.map