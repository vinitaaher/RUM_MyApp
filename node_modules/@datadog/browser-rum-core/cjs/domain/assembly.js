"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startRumAssembly = void 0;
var browser_core_1 = require("@datadog/browser-core");
var syntheticsContext_1 = require("./contexts/syntheticsContext");
var ciTestContext_1 = require("./contexts/ciTestContext");
var limitModification_1 = require("./limitModification");
var VIEW_MODIFIABLE_FIELD_PATHS = {
    'view.name': 'string',
    'view.url': 'string',
    'view.referrer': 'string',
};
var USER_CUSTOMIZABLE_FIELD_PATHS = {
    context: 'object',
};
var modifiableFieldPathsByEvent;
function startRumAssembly(configuration, lifeCycle, sessionManager, viewContexts, urlContexts, actionContexts, displayContext, getCommonContext, reportError) {
    var _a, _b;
    modifiableFieldPathsByEvent = (_a = {},
        _a["view" /* RumEventType.VIEW */] = VIEW_MODIFIABLE_FIELD_PATHS,
        _a["error" /* RumEventType.ERROR */] = (0, browser_core_1.assign)({
            'error.message': 'string',
            'error.stack': 'string',
            'error.resource.url': 'string',
            'error.fingerprint': 'string',
        }, USER_CUSTOMIZABLE_FIELD_PATHS, VIEW_MODIFIABLE_FIELD_PATHS),
        _a["resource" /* RumEventType.RESOURCE */] = (0, browser_core_1.assign)({
            'resource.url': 'string',
        }, (0, browser_core_1.isExperimentalFeatureEnabled)(browser_core_1.ExperimentalFeature.WRITABLE_RESOURCE_GRAPHQL) && {
            'resource.graphql': 'object',
        }, USER_CUSTOMIZABLE_FIELD_PATHS, VIEW_MODIFIABLE_FIELD_PATHS),
        _a["action" /* RumEventType.ACTION */] = (0, browser_core_1.assign)({
            'action.target.name': 'string',
        }, USER_CUSTOMIZABLE_FIELD_PATHS, VIEW_MODIFIABLE_FIELD_PATHS),
        _a["long_task" /* RumEventType.LONG_TASK */] = (0, browser_core_1.assign)({}, USER_CUSTOMIZABLE_FIELD_PATHS, VIEW_MODIFIABLE_FIELD_PATHS),
        _a["vital" /* RumEventType.VITAL */] = (0, browser_core_1.assign)({}, USER_CUSTOMIZABLE_FIELD_PATHS, VIEW_MODIFIABLE_FIELD_PATHS),
        _a);
    var eventRateLimiters = (_b = {},
        _b["error" /* RumEventType.ERROR */] = (0, browser_core_1.createEventRateLimiter)("error" /* RumEventType.ERROR */, configuration.eventRateLimiterThreshold, reportError),
        _b["action" /* RumEventType.ACTION */] = (0, browser_core_1.createEventRateLimiter)("action" /* RumEventType.ACTION */, configuration.eventRateLimiterThreshold, reportError),
        _b["vital" /* RumEventType.VITAL */] = (0, browser_core_1.createEventRateLimiter)("vital" /* RumEventType.VITAL */, configuration.eventRateLimiterThreshold, reportError),
        _b);
    var syntheticsContext = (0, syntheticsContext_1.getSyntheticsContext)();
    var ciTestContext = (0, ciTestContext_1.getCiTestContext)();
    lifeCycle.subscribe(12 /* LifeCycleEventType.RAW_RUM_EVENT_COLLECTED */, function (_a) {
        var startTime = _a.startTime, rawRumEvent = _a.rawRumEvent, domainContext = _a.domainContext, savedCommonContext = _a.savedCommonContext, customerContext = _a.customerContext;
        var viewContext = viewContexts.findView(startTime);
        var urlContext = urlContexts.findUrl(startTime);
        var session = sessionManager.findTrackedSession(startTime);
        if (session && viewContext && urlContext) {
            var commonContext = savedCommonContext || getCommonContext();
            var actionId = actionContexts.findActionId(startTime);
            var rumContext = {
                _dd: {
                    format_version: 2,
                    drift: (0, browser_core_1.currentDrift)(),
                    configuration: {
                        session_sample_rate: (0, browser_core_1.round)(configuration.sessionSampleRate, 3),
                        session_replay_sample_rate: (0, browser_core_1.round)(configuration.sessionReplaySampleRate, 3),
                    },
                    browser_sdk_version: (0, browser_core_1.canUseEventBridge)() ? "5.10.0" : undefined,
                },
                application: {
                    id: configuration.applicationId,
                },
                date: (0, browser_core_1.timeStampNow)(),
                service: viewContext.service || configuration.service,
                version: viewContext.version || configuration.version,
                source: 'browser',
                session: {
                    id: session.id,
                    type: syntheticsContext ? "synthetics" /* SessionType.SYNTHETICS */ : ciTestContext ? "ci_test" /* SessionType.CI_TEST */ : "user" /* SessionType.USER */,
                },
                view: {
                    id: viewContext.id,
                    name: viewContext.name,
                    url: urlContext.url,
                    referrer: urlContext.referrer,
                },
                action: needToAssembleWithAction(rawRumEvent) && actionId ? { id: actionId } : undefined,
                synthetics: syntheticsContext,
                ci_test: ciTestContext,
                display: displayContext.get(),
                connectivity: (0, browser_core_1.getConnectivity)(),
            };
            var serverRumEvent = (0, browser_core_1.combine)(rumContext, rawRumEvent);
            serverRumEvent.context = (0, browser_core_1.combine)(commonContext.context, customerContext);
            if (!('has_replay' in serverRumEvent.session)) {
                ;
                serverRumEvent.session.has_replay = commonContext.hasReplay;
            }
            if (serverRumEvent.type === 'view') {
                ;
                serverRumEvent.session.sampled_for_replay = session.sessionReplayAllowed;
            }
            if (!(0, browser_core_1.isEmptyObject)(commonContext.user)) {
                ;
                serverRumEvent.usr = commonContext.user;
            }
            if (shouldSend(serverRumEvent, configuration.beforeSend, domainContext, eventRateLimiters)) {
                if ((0, browser_core_1.isEmptyObject)(serverRumEvent.context)) {
                    delete serverRumEvent.context;
                }
                lifeCycle.notify(13 /* LifeCycleEventType.RUM_EVENT_COLLECTED */, serverRumEvent);
            }
        }
    });
}
exports.startRumAssembly = startRumAssembly;
function shouldSend(event, beforeSend, domainContext, eventRateLimiters) {
    var _a;
    if (beforeSend) {
        var result = (0, limitModification_1.limitModification)(event, modifiableFieldPathsByEvent[event.type], function (event) {
            return beforeSend(event, domainContext);
        });
        if (result === false && event.type !== "view" /* RumEventType.VIEW */) {
            return false;
        }
        if (result === false) {
            browser_core_1.display.warn("Can't dismiss view events using beforeSend!");
        }
    }
    var rateLimitReached = (_a = eventRateLimiters[event.type]) === null || _a === void 0 ? void 0 : _a.isLimitReached();
    return !rateLimitReached;
}
function needToAssembleWithAction(event) {
    return ["error" /* RumEventType.ERROR */, "resource" /* RumEventType.RESOURCE */, "long_task" /* RumEventType.LONG_TASK */].indexOf(event.type) !== -1;
}
//# sourceMappingURL=assembly.js.map