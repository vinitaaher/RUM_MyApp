import type { Context, User, DeflateWorker, DeflateEncoderStreamId, DeflateEncoder, TrackingConsent } from '@datadog/browser-core';
import type { LifeCycle } from '../domain/lifeCycle';
import type { ViewContexts } from '../domain/contexts/viewContexts';
import type { RumSessionManager } from '../domain/rumSessionManager';
import type { ReplayStats } from '../rawRumEvent.types';
import type { RumConfiguration, RumInitConfiguration } from '../domain/configuration';
import type { ViewOptions } from '../domain/view/trackViews';
import type { StartRum, StartRumResult } from './startRum';
export type RumPublicApi = ReturnType<typeof makeRumPublicApi>;
export interface RecorderApi {
    start: () => void;
    stop: () => void;
    onRumStart: (lifeCycle: LifeCycle, configuration: RumConfiguration, sessionManager: RumSessionManager, viewContexts: ViewContexts, deflateWorker: DeflateWorker | undefined) => void;
    isRecording: () => boolean;
    getReplayStats: (viewId: string) => ReplayStats | undefined;
    getSessionReplayLink: () => string | undefined;
}
export interface RumPublicApiOptions {
    ignoreInitIfSyntheticsWillInjectRum?: boolean;
    startDeflateWorker?: (configuration: RumConfiguration, source: string, onInitializationFailure: () => void) => DeflateWorker | undefined;
    createDeflateEncoder?: (configuration: RumConfiguration, worker: DeflateWorker, streamId: DeflateEncoderStreamId) => DeflateEncoder;
}
export interface Strategy {
    init: (initConfiguration: RumInitConfiguration) => void;
    initConfiguration: RumInitConfiguration | undefined;
    getInternalContext: StartRumResult['getInternalContext'];
    stopSession: StartRumResult['stopSession'];
    addTiming: StartRumResult['addTiming'];
    startView: StartRumResult['startView'];
    addAction: StartRumResult['addAction'];
    addError: StartRumResult['addError'];
    addFeatureFlagEvaluation: StartRumResult['addFeatureFlagEvaluation'];
    startDurationVital: StartRumResult['startDurationVital'];
    stopDurationVital: StartRumResult['stopDurationVital'];
}
export declare function makeRumPublicApi(startRumImpl: StartRum, recorderApi: RecorderApi, options?: RumPublicApiOptions): {
    init: (initConfiguration: RumInitConfiguration) => void;
    /**
     * Set the tracking consent of the current user.
     *
     * @param {"granted" | "not-granted"} trackingConsent The user tracking consent
     *
     * Data will be sent only if it is set to "granted". This value won't be stored by the library
     * across page loads: you will need to call this method or set the appropriate `trackingConsent`
     * field in the init() method at each page load.
     *
     * If this method is called before the init() method, the provided value will take precedence
     * over the one provided as initialization parameter.
     */
    setTrackingConsent: (trackingConsent: TrackingConsent) => void;
    setGlobalContextProperty: (key: any, value: any) => void;
    removeGlobalContextProperty: (key: any) => void;
    getGlobalContext: () => Context;
    setGlobalContext: (context: any) => void;
    clearGlobalContext: () => void;
    getInternalContext: (startTime?: number) => import("../domain/contexts/internalContext").InternalContext | undefined;
    getInitConfiguration: () => RumInitConfiguration | undefined;
    addAction: (name: string, context?: object) => void;
    addError: (error: unknown, context?: object) => void;
    /**
     * Add a custom timing relative to the start of the current view,
     * stored in @view.custom_timings.<timing_name>
     *
     * @param name name of the custom timing
     * @param [time] epoch timestamp of the custom timing (if not set, will use current time)
     *
     * Note: passing a relative time is discouraged since it is actually used as-is but displayed relative to the view start.
     * We currently don't provide a way to retrieve the view start time, so it can be challenging to provide a timing relative to the view start.
     * see https://github.com/DataDog/browser-sdk/issues/2552
     */
    addTiming: (name: string, time?: number) => void;
    setUser: (newUser: User) => void;
    getUser: () => Context;
    setUserProperty: (key: any, property: any) => void;
    removeUserProperty: (key: any) => void;
    clearUser: () => void;
    startView: {
        (name?: string): void;
        (options: ViewOptions): void;
    };
    stopSession: () => void;
    /**
     * This feature is currently in beta. For more information see the full [feature flag tracking guide](https://docs.datadoghq.com/real_user_monitoring/feature_flag_tracking/).
     */
    addFeatureFlagEvaluation: (key: string, value: any) => void;
    getSessionReplayLink: () => string | undefined;
    startSessionReplayRecording: () => void;
    stopSessionReplayRecording: () => void;
} & {
    onReady(callback: () => void): void;
    version: string;
};
